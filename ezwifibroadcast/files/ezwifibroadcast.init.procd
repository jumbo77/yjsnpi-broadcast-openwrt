#!/bin/sh /etc/rc.common

START=99
STOP=15

USE_PROCD=1

WBC_INI_FILE=/var/run/wbc/config.ini
RX_UDP_BIND_PORT=30002
RX_RSSI_UDP_BIND_PORT=30003
RX_TELE_UDP_BIND_PORT=30004

EXTRA_COMMANDS="measure ubus_mon"
EXTRA_HELP=<<EOF
	measure	Test tx_measure with current settings.
	ubus_mon Get ubus info.
EOF

STTY_ARGS="-icrnl -ocrnl -imaxbel -opost -isig -icanon -echo -echoe -ixoff -ixon"

ubus_mon() {
	ubus call service list '{"name":"ezwifibroadcast"}'
}

rssi_mon() {
	/usr/sbin/rx_status /wifibroadcast_rx_status_0 0
}

measure() {
	init_nic >/dev/null 
	TEST_RESULT=1000000	# default
	if [ "$(uci get wbc.video.mode)" = "tx" ]; then
		TEST_RESULT=$(/usr/sbin/tx_measure $WBC_INI_FILE)
	fi
	echo $TEST_RESULT
}

init_nic() {
	NIC=$(uci get wbc.nic.iface)
	FREQ=$(uci get wbc.nic.freq)
	CHANBW=$(uci get wbc.nic.chanbw)
	PHY_NAME=$(iwinfo $NIC info|grep "PHY name"|cut -d ':' -f 3)
	iw reg set CN					
	ifconfig $NIC mtu 2304
	ifconfig $NIC down 				
	iw dev $NIC set monitor none	
	ifconfig $NIC up 			
	iw dev $NIC set freq $FREQ		
	CHANBW_PATH=$(find /sys/kernel/debug/ieee80211 -name chanbw |grep $PHY_NAME)
	if [ -f $CHANBW_PATH ]; then
		echo "    Init_NIC: $NIC maybe supports 5MHz/10MHz bandwidth."
		echo $CHANBW > $CHANBW_PATH 
	else
		echo "    Init_NIC: $NIC on 5MHz/10MHz bandwidth is not supported. Use default instead."
	fi
}
gen_ini() {
	# clean
	rm $WBC_INI_FILE >/dev/null 2>&1
	touch $WBC_INI_FILE >/dev/null 2>&1
	
	# 1. tx_rawsock/tx_measure 
	if [ "$(uci get wbc.video.mode)" = "tx" ]; then
		cat >> $WBC_INI_FILE <<EOF
[tx]
port=0
datanum=$(uci get wbc.video.datanum)
fecnum=$(uci get wbc.video.fecnum)
packetsize=$(uci get wbc.video.packetsize)
frametype=$(uci get wbc.video.frametype)
rate=$(uci get wbc.video.bitrate)
mode=0
nic=$(uci get wbc.nic.iface)
udp_port=$(uci get wbc.video.listen_port)
udp_bufsize=262144
EOF
		echo "" >> $WBC_INI_FILE
	fi
	# 2. rx #wip
	if [ "$(uci get wbc.video.mode)" = "rx" ]; then
		cat >> $WBC_INI_FILE <<EOF
[rx]
port=0
datanum=$(uci get wbc.video.datanum)
fecnum=$(uci get wbc.video.fecnum)
packetsize=$(uci get wbc.video.packetsize)
bufsize=$(uci get wbc.video.rxbuf)
nic=$(uci get wbc.nic.iface)
udp_ip=$(uci get wbc.video.send_ip_port|cut -d ':' -f 1)
udp_port=$(uci get wbc.video.send_ip_port|cut -d ':' -f 2)
alive_udp_ip=$(uci get wbc.video.alive_send_ip_port|cut -d ':' -f 1)
alive_udp_port=$(uci get wbc.video.alive_send_ip_port|cut -d ':' -f 2)
udp_bind_port=$RX_UDP_BIND_PORT
recording=$(uci get wbc.video.save_enable 2>/dev/null)	
recording_dir=$(uci get wbc.video.savepath)
EOF
		echo "" >> $WBC_INI_FILE
	fi

	if [ $(uci get wbc.rssi.enable) -eq 1 ]; then
		if [ "$(uci get wbc.rssi.mode)" = "rx" ]; then
			cat >> $WBC_INI_FILE <<EOF
[rssirx]
udp_ip=$(uci get wbc.rssi.send_ip_port|cut -d ':' -f 1)
udp_port=$(uci get wbc.rssi.send_ip_port|cut -d ':' -f 2)
udp_bind_port=$RX_RSSI_UDP_BIND_PORT
EOF
			echo "" >> $WBC_INI_FILE
		fi
	fi
	
	
	if [ $(uci get wbc.telemetry.enable) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Telemetry Enabled."
		if [ "$(uci get wbc.telemetry.mode)" = "rx" ]; then
			cat >> $WBC_INI_FILE <<EOF
[rx_telemetry]
port=1
nic=$(uci get wbc.nic.iface)
udp_ip=$(uci get wbc.telemetry.send_ip_port|cut -d ':' -f 1)
udp_port=$(uci get wbc.telemetry.send_ip_port|cut -d ':' -f 2)
udp_bind_port=$RX_TELE_UDP_BIND_PORT
recording=$(uci get wbc.telemetry.save_enable 2>/dev/null)
recording_dir=$(uci get wbc.telemetry.savepath)
EOF
			echo "" >> $WBC_INI_FILE
		fi
		if [ "$(uci get wbc.telemetry.mode)" = "tx" ]; then 
			cat >> $WBC_INI_FILE <<EOF
[tx_telemetry]
cts_protection=$(uci get wbc.telemetry.cts)
port=1
retrans_count=$(uci get wbc.telemetry.retrans)
tele_protocol=$(uci get wbc.telemetry.proto)
rate=$(uci get wbc.telemetry.bitrate)
mode=0
nic=$(uci get wbc.nic.iface)
EOF
			echo "" >> $WBC_INI_FILE
		fi
	fi
}

init() {
	# -1. Generate ini file and link it to /www
	gen_ini
	ln -s $WBC_INI_FILE /www/$(uci get wbc.wbc.confpath)

	# -0.5. and osd ini
	if [ $(wbc.telemetry.osd_ini_enable) -eq 1 ]; then
		ln -s /etc/wbc/osdconfig.ini /www/wbc-osdconfig.ini
	fi
	
	# 0. Init Wi-Fi card here
	echo "YJSNPI-Broadcast: Init Wi-Fi Card..."
	init_nic
	if [ "$(uci get wbc.video.mode)" = "tx" ]; then
		echo "YJSNPI-Broadcast: TX measure..."
		echo $(measure) > /tmp/bitrate_measured_kbit
		echo "    TX measure finished, $(cat /tmp/bitrate_measured_kbit)"
		if [ "$(uci get wbc.video.bitrate_mode)" = "auto" ]; then
			echo `expr $(cat /tmp/bitrate_measured_kbit) \* $(uci get wbc.video.bitrate_percent) / 102400` > /tmp/bitrate_kbit
		else
			echo $(uci get wbc.video.bitrate_manual) > /tmp/bitrate_kbit
		fi 
	else
		echo 1024000 > /tmp/bitrate_measured_kbit
		echo 1000 > /tmp/bitrate_kbit
	fi
	# To-do: Find out what these things mean and how to bypass

	echo "0" > /tmp/cts
	echo "0" > /tmp/undervolt 		# a wireless router should never...
	mkdir -p /var/run/wbc			# for saving running status
	
	# shared memory
	/usr/sbin/sharedmem_init_tx
	/usr/sbin/sharedmem_init_rx
	
	# ath9k_hw parameters (reboot to apply)
	ATH9K_HW_PARAMS=$(uci get wbc.nic.ath9k_hwparams)
	echo $ATH9K_HW_PARAMS > /etc/modules.d/ath9k_hw
}

video_tx_instance() {
	procd_open_instance "video_tx"
	#if [ $(uci get wbc.video.encrypt_enable) -eq 1 ]; then
#	procd_set_param command socat -u UDP-LISTEN:$(uci get wbc.video.listen_port) EXEC:"/usr/sbin/tx_rawsock -p 0 -b $(uci get wbc.video.datanum) -r $(uci get wbc.video.fecnum) -f $(uci get wbc.video.packetsize) -t $(uci get wbc.video.frametype) -d $(uci get wbc.video.bitrate) -y 0 $(uci get wbc.nic.iface)"
	procd_set_param command /usr/sbin/tx_rawsock $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/videotx.pid
	procd_close_instance
}

video_rx_instance() {
	mkdir -p $(uci get wbc.video.savepath 2>/dev/null) 2>/dev/null
	procd_open_instance "video_rx"
	procd_set_param command /usr/sbin/rx $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000} 
	procd_set_param pidfile /var/run/wbc/videorx.pid 
	procd_close_instance

	procd_open_instance "video_rx_alive"
	procd_set_param command /usr/sbin/check_alive $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000} 
	procd_set_param pidfile /var/run/wbc/videorxalive.pid 
	procd_close_instance
}

rssi_tx_instance() {
	procd_open_instance "rssi_tx"
	procd_set_param command /usr/sbin/rssitx $(uci get wbc.nic.iface)
#	procd_set_param stdout 1 	# so tm noisy
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/rssitx.pid
	procd_close_instance
}

rssi_rx_instance() {
	procd_open_instance "rssi_rx"
	procd_set_param command /usr/sbin/rssirx $(uci get wbc.nic.iface)
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/rssirx.pid
	procd_close_instance
	
	procd_open_instance "rssi_forward"
	procd_set_param command /usr/sbin/rssi_forward $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/rssi_forward.pid
	procd_close_instance
}

telemetry_tx_instance() {
	procd_open_instance "telemetry_tx"
	procd_set_param command socat -u $(uci get wbc.telemetry.uart),b$(uci get wbc.telemetry.baud),raw 
	procd_append_param command EXEC:"/usr/sbin/tx_telemetry $WBC_INI_FILE"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/telemetry_tx.pid
	procd_close_instance
}

telemetry_rx_instance() {
	stty -F $(uci get wbc.telemetry.uart) $STTY_ARGS $(uci get wbc.telemetry.baud) 
	procd_open_instance "telemetry_rx"
	procd_set_param command /usr/sbin/rx_rc_telemetry_buf $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/telemetry_rx.pid
	procd_close_instance
}

start_video() {
	# 1. Video TX/RX Instance
	if [ $(uci get wbc.video.enable) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Video Transfer Enabled."
		if [ "$(uci get wbc.video.mode)" = "tx" ]; then
			video_tx_instance
			echo "    Video TX Mode, Starting tx..."
		fi
		if [ "$(uci get wbc.video.mode)" = "rx" ]; then
			video_rx_instance
			echo "    Video RX Mode, Starting rx..."
		fi
	fi
}

start_rssi() {
	if [ $(uci get wbc.rssi.enable) -eq 1 ]; then
		echo "YJSNPI-Broadcast: RSSI Enabled."
		if [ "$(uci get wbc.rssi.mode)" = "tx" ]; then
			rssi_tx_instance
			echo "    RSSI TX Mode, Starting rssitx..."
		fi
		if [ "$(uci get wbc.rssi.mode)" = "rx" ]; then
			rssi_rx_instance
			echo "    RSSI RX Mode, Starting rssirx, forward to $(uci get wbc.rssi.send_ip_port) ..."
		fi
	fi
}

start_telemetry() {
	if [ $(uci get wbc.telemetry.enable) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Telemetry Enabled."
		if [ "$(uci get wbc.telemetry.mode)" = "rx" ]; then
			 telemetry_rx_instance
			echo "    Telemetry RX Mode, redirect to $(uci get wbc.telemetry.send_ip_port) and $(uci get wbc.telemetry.uart)..."
		fi

		if [ "$(uci get wbc.telemetry.mode)" = "tx" ]; then 
			telemetry_tx_instance
			echo "YJSNPI-Broadcast: Telemetry TX Mode on $(uci get wbc.telemetry.uart)..."
		fi
	fi
}

start_service() {
	if [ $(uci get wbc.wbc.enable) -eq 0 ]; then 
		exit
	fi
	init
	start_video
	start_telemetry
	start_rssi
	echo `date '+%s'` >/var/run/wbc/restart_timestamp
	echo `md5sum /etc/config/wbc | cut -d ' ' -f 1` >/var/run/wbc/restart_config_md5sum
}

service_triggers() {
        procd_add_reload_trigger "wbc"
}

