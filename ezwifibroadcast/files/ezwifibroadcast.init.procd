#!/bin/sh /etc/rc.common

START=99
STOP=15

USE_PROCD=1

WBC_INI_FILE=/var/run/wbc/config.ini
RX_UDP_BIND_PORT=30002
RX_RSSI_UDP_BIND_PORT=30003
RX_TELE_UDP_BIND_PORT=30004
AIRPI_SYSAIR_UDP_BIND_PORT=30006

EXTRA_COMMANDS="measure ubus_mon"
EXTRA_HELP=<<EOF
	measure	Test tx_measure with current settings.
	ubus_mon Get ubus info.
EOF

STTY_ARGS="-icrnl -ocrnl -imaxbel -opost -isig -icanon -echo -echoe -ixoff -ixon"

ubus_mon() {
	ubus call service list '{"name":"ezwifibroadcast"}'
}

rssi_mon() {
	/usr/sbin/rx_status /wifibroadcast_rx_status_0 0
}

measure() {
	init_nic >/dev/null 
	TEST_RESULT=1000000	# default
	if [ "$(uci get wbc.video.mode 2>/dev/null)" = "tx" ]; then
		TEST_RESULT=$(/usr/sbin/tx_measure $WBC_INI_FILE)
	fi
	echo $TEST_RESULT
}

init_nic() {
	NIC=$(uci get wbc.nic.iface 2>/dev/null)
	FREQ=$(uci get wbc.nic.freq 2>/dev/null)
	CHANBW=$(uci get wbc.nic.chanbw 2>/dev/null)
	TXPOWER=$(uci get wbc.nic.txpower 2>/dev/null)
	PHY_NAME=$(iwinfo $NIC info|grep "PHY name"|cut -d ':' -f 3)
	iw reg set CN					
	ifconfig $NIC mtu 2304
	ifconfig $NIC down 				
	iw dev $NIC set monitor none	
	ifconfig $NIC up 			
	iw dev $NIC set freq $FREQ		
	CHANBW_PATH=$(find /sys/kernel/debug/ieee80211 -name chanbw |grep $PHY_NAME)
	if [ -f $CHANBW_PATH ]; then
		echo "    Init_NIC: $NIC maybe supports 5MHz/10MHz bandwidth."
		echo $CHANBW > $CHANBW_PATH 
	else
		echo "    Init_NIC: $NIC on 5MHz/10MHz bandwidth is not supported. Use default instead."
	fi
	TXPOWER_PATH=$(find /sys/kernel/debug/ieee80211 -name txpower_man |grep $PHY_NAME)
	if [ -f $TXPOWER_PATH ]; then
		echo "    Init_NIC: $NIC maybe supports custom txpower settings."
		echo $TXPOWER > $TXPOWER_PATH 
	else
		echo "    Init_NIC: $NIC not support custom txpower. Use default instead."
	fi
}
gen_ini() {
	# clean
	mkdir -p /var/run/wbc
	rm $WBC_INI_FILE >/dev/null 2>&1
	touch $WBC_INI_FILE >/dev/null 2>&1
	
	cat >> $WBC_INI_FILE <<EOF
# wbc config file. Auto generated. Do not edit. 

EOF

	# 1. tx_rawsock/tx_measure 
	if [ "$(uci get wbc.video.mode 2>/dev/null)" = "tx" ]; then
		if [ $(uci get wbc.video.wifimode 2>/dev/null) -eq 0 ]; then 
			VIDEO_WIFI_RATE=$(uci get wbc.video.bitrate 2>/dev/null)		
		else
			VIDEO_WIFI_RATE=$(uci get wbc.video.mcs 2>/dev/null)	
		fi
		cat >> $WBC_INI_FILE <<EOF
[tx]
port=0
datanum=$(uci get wbc.video.datanum 2>/dev/null)
fecnum=$(uci get wbc.video.fecnum 2>/dev/null)
packetsize=$(uci get wbc.video.packetsize 2>/dev/null)
frametype=$(uci get wbc.video.frametype 2>/dev/null)
rate=$VIDEO_WIFI_RATE
mode=0
nic=$(uci get wbc.nic.iface 2>/dev/null)
udp_port=$(uci get wbc.video.listen_port 2>/dev/null) 
udp_bufsize=262144
video_forward_port=$(uci get wbc.video.listen_port 2>/dev/null)
video_fps=$(uci get wbc.video.fps 2>/dev/null)
video_size=$(uci get wbc.video.imgsize 2>/dev/null)
video_bitrate=1024000
video_keyframerate=$(uci get wbc.video.keyframerate 2>/dev/null)
video_extraparams=$(uci get wbc.video.extraparams 2>/dev/null)
wifimode=$(uci get wbc.video.wifimode 2>/dev/null)
ldpc=$(uci get wbc.video.ldpc 2>/dev/null)

[sysair_forward_in]
udp_port=$(uci get wbc.video.sysair_forward_port 2>/dev/null)
mode=tx

[sysair_forward]
udp_ip=$(ifconfig br-lan|grep "inet addr"|awk {'print $2'}|cut -d ":" -f 2)
udp_port=$(uci get wbc.video.sysair_forward_port 2>/dev/null)
udp_bind_port=$AIRPI_SYSAIR_UDP_BIND_PORT 

EOF
		echo "" >> $WBC_INI_FILE
	fi
	# 2. rx #wip
	if [ "$(uci get wbc.video.mode 2>/dev/null)" = "rx" ]; then
		cat >> $WBC_INI_FILE <<EOF
[rx]
port=0
datanum=$(uci get wbc.video.datanum 2>/dev/null)
fecnum=$(uci get wbc.video.fecnum 2>/dev/null)
packetsize=$(uci get wbc.video.packetsize 2>/dev/null)
bufsize=$(uci get wbc.video.rxbuf 2>/dev/null)
nic=$(uci get wbc.nic.iface 2>/dev/null)
udp_ip=$(uci get wbc.video.send_ip_port 2>/dev/null|cut -d ':' -f 1)
udp_port=$(uci get wbc.video.send_ip_port 2>/dev/null|cut -d ':' -f 2)

udp_bind_port=$RX_UDP_BIND_PORT
recording=$(uci get wbc.video.save_enable 2>/dev/null)	
recording_dir=$(uci get wbc.video.savepath 2>/dev/null)

[video]
mode=rx	
udp_port=$(uci get wbc.video.send_ip_port 2>/dev/null|cut -d ':' -f 2)
udp_bufsize=524288

[alive]	
udp_ip=$(uci get wbc.video.alive_send_ip_port 2>/dev/null|cut -d ':' -f 1)
udp_port=$(uci get wbc.video.alive_send_ip_port 2>/dev/null|cut -d ':' -f 2)
udp_bind_port=35010

[alive_in]	
udp_port=$(uci get wbc.video.alive_send_ip_port 2>/dev/null| cut -d ':' -f 2)
exec=monit restart wbc-hellovideo

EOF
		echo "" >> $WBC_INI_FILE
	fi

	if [ $(uci get wbc.rssi.enable 2>/dev/null) -eq 1 ]; then
		if [ "$(uci get wbc.rssi.mode 2>/dev/null)" = "rx" ]; then
			cat >> $WBC_INI_FILE <<EOF
[rssirx]
udp_ip=$(uci get wbc.rssi.send_ip_port 2>/dev/null|cut -d ':' -f 1)
udp_port=$(uci get wbc.rssi.send_ip_port 2>/dev/null|cut -d ':' -f 2)
udp_bind_port=$RX_RSSI_UDP_BIND_PORT

[rssi_in]
mode=rx
udp_port=$(uci get wbc.rssi.send_ip_port 2>/dev/null|cut -d ':' -f 2)

EOF
			echo "" >> $WBC_INI_FILE
		fi
	fi
	
	
	if [ $(uci get wbc.telemetry.enable 2>/dev/null) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Telemetry Enabled."
		if [ "$(uci get wbc.telemetry.mode 2>/dev/null)" = "rx" ]; then
			cat >> $WBC_INI_FILE <<EOF
[rx_telemetry]
port=1
nic=$(uci get wbc.nic.iface 2>/dev/null)
udp_ip=$(uci get wbc.telemetry.send_ip_port 2>/dev/null |cut -d ':' -f 1)
udp_port=$(uci get wbc.telemetry.send_ip_port 2>/dev/null |cut -d ':' -f 2)
udp_bind_port=$RX_TELE_UDP_BIND_PORT
recording=$(uci get wbc.telemetry.save_enable 2>/dev/null)
recording_dir=$(uci get wbc.telemetry.savepath 2>/dev/null)

EOF
			echo "" >> $WBC_INI_FILE
		fi
		if [ "$(uci get wbc.telemetry.mode 2>/dev/null)" = "tx" ]; then 
			if [ $(uci get wbc.telemetry.wifimode 2>/dev/null) -eq 0 ]; then 
				TELE_WIFI_RATE=$(uci get wbc.telemetry.bitrate 2>/dev/null)		
			else
				TELE_WIFI_RATE=$(uci get wbc.telemetry.mcs 2>/dev/null)	
			fi
			cat >> $WBC_INI_FILE <<EOF
[tx_telemetry]
cts_protection=$(uci get wbc.telemetry.cts 2>/dev/null)
port=1
retrans_count=$(uci get wbc.telemetry.retrans 2>/dev/null)
tele_protocol=$(uci get wbc.telemetry.proto 2>/dev/null)
rate=$TELE_WIFI_RATE
mode=0
nic=$(uci get wbc.nic.iface 2>/dev/null)
wifimode=$(uci get wbc.telemetry.wifimode 2>/dev/null)
ldpc=$(uci get wbc.telemetry.ldpc 2>/dev/null)
EOF
			echo "" >> $WBC_INI_FILE
		fi
	fi
}

init() {
	# -1. Generate ini file and link it to /www
	rm /www/$(uci get wbc.wbc.confpath 2>/dev/null) 2>/dev/null
	gen_ini

	# -0.5. and osd ini
	if [ $(uci get wbc.telemetry.osd_ini_enable 2>/dev/null) -eq 1 ] >/dev/null 2>&1 ; then
		rm /www/wbc-osdconfig.ini >/dev/null 2>&1
		ln -s /etc/wbc/osdconfig.ini /www/wbc-osdconfig.ini
	fi
	
	# 0. Init Wi-Fi card here
	echo "YJSNPI-Broadcast: Init Wi-Fi Card..."
	init_nic
	if [ "$(uci get wbc.video.mode 2>/dev/null)" = "tx" ]; then
		echo "YJSNPI-Broadcast: TX measure..."
		MEASURE_RESULT=$(measure)
		echo $MEASURE_RESULT > /tmp/bitrate_measured_kbit
		echo "    TX measure finished, $(cat /tmp/bitrate_measured_kbit)"
		if [ "$(uci get wbc.video.bitrate_mode 2>/dev/null)" = "auto" ]; then
			echo `expr $(cat /tmp/bitrate_measured_kbit) \* $(uci get wbc.video.bitrate_percent 2>/dev/null) / 102400` > /tmp/bitrate_kbit
		else
			echo $(uci get wbc.video.bitrate_manual 2>/dev/null) > /tmp/bitrate_kbit
		fi 
		BITRATE_BIT=`expr $(cat /tmp/bitrate_kbit) \* 1024`
		sed -i "s/video_bitrate=1024000/video_bitrate=$BITRATE_BIT/g" $WBC_INI_FILE
	else
		echo 1024000 > /tmp/bitrate_measured_kbit
		echo 1000 > /tmp/bitrate_kbit
	fi

	rm /www/$(uci get wbc.wbc.confpath 2>/dev/null)
	ln -s $WBC_INI_FILE /www/$(uci get wbc.wbc.confpath 2>/dev/null)

	# To-do: Find out what these things mean and how to bypass

	echo "0" > /tmp/cts
	echo "0" > /tmp/undervolt 		# a wireless router should never...
	mkdir -p /var/run/wbc			# for saving running status
	
	# shared memory
	/usr/sbin/sharedmem_init_tx
	/usr/sbin/sharedmem_init_rx
	
}

video_tx_instance() {
	procd_open_instance "video_tx"
	#if [ $(uci get wbc.video.encrypt_enable) -eq 1 ]; then
	procd_set_param command socat -u UDP-LISTEN:$(uci get wbc.video.listen_port) EXEC:"/usr/sbin/tx_rawsock $WBC_INI_FILE"
#	procd_set_param command /usr/sbin/tx_rawsock $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/videotx.pid
	procd_close_instance
	
	procd_open_instance "sysair_forward_in"
	procd_set_param command /usr/sbin/sysair_forward_in $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/sysair.pid
	procd_close_instance
	
}

video_rx_instance() {
	mkdir -p $(uci get wbc.video.savepath 2>/dev/null) 2>/dev/null
	procd_open_instance "video_rx"
	procd_set_param command /usr/sbin/rx $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000} 
	procd_set_param pidfile /var/run/wbc/videorx.pid 
	procd_close_instance

	procd_open_instance "video_rx_alive"
	procd_set_param command /usr/sbin/check_alive $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000} 
	procd_set_param pidfile /var/run/wbc/videorxalive.pid 
	procd_close_instance
}

rssi_tx_instance() {
	procd_open_instance "rssi_tx"
	procd_set_param command /usr/sbin/rssitx $(uci get wbc.nic.iface 2>/dev/null)
#	procd_set_param stdout 1 	# so tm noisy
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/rssitx.pid
	procd_close_instance
}

rssi_rx_instance() {
	procd_open_instance "rssi_rx"
	procd_set_param command /usr/sbin/rssirx $(uci get wbc.nic.iface 2>/dev/null)
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/rssirx.pid
	procd_close_instance
	
	procd_open_instance "rssi_forward"
	procd_set_param command /usr/sbin/rssi_forward $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/rssi_forward.pid
	procd_close_instance
}

telemetry_tx_instance() {
	procd_open_instance "telemetry_tx"
	procd_set_param command socat -u $(uci get wbc.telemetry.uart 2>/dev/null),b$(uci get wbc.telemetry.baud 2>/dev/null),raw 
	procd_append_param command EXEC:"/usr/sbin/tx_telemetry $WBC_INI_FILE"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/telemetry_tx.pid
	procd_close_instance
}

telemetry_rx_instance() {
	stty -F $(uci get wbc.telemetry.uart 2>/dev/null) $STTY_ARGS $(uci get wbc.telemetry.baud 2>/dev/null) 
	procd_open_instance "telemetry_rx"
	procd_set_param command /usr/sbin/rx_rc_telemetry_buf $WBC_INI_FILE
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-10000}
	procd_set_param pidfile /var/run/wbc/telemetry_rx.pid
	procd_close_instance
}

start_video() {
	# 1. Video TX/RX Instance
	if [ $(uci get wbc.video.enable 2>/dev/null) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Video Transfer Enabled."
		if [ "$(uci get wbc.video.mode 2>/dev/null)" = "tx" ]; then
			video_tx_instance
			echo "    Video TX Mode, Starting tx..."
		fi
		if [ "$(uci get wbc.video.mode 2>/dev/null)" = "rx" ]; then
			video_rx_instance
			echo "    Video RX Mode, Starting rx..."
		fi
	fi
}

start_rssi() {
	if [ $(uci get wbc.rssi.enable 2>/dev/null) -eq 1 ]; then
		echo "YJSNPI-Broadcast: RSSI Enabled."
		if [ "$(uci get wbc.rssi.mode 2>/dev/null)" = "tx" ]; then
			rssi_tx_instance
			echo "    RSSI TX Mode, Starting rssitx..."
		fi
		if [ "$(uci get wbc.rssi.mode 2>/dev/null)" = "rx" ]; then
			rssi_rx_instance
			echo "    RSSI RX Mode, Starting rssirx, forward to $(uci get wbc.rssi.send_ip_port 2>/dev/null) ..."
		fi
	fi
}

start_telemetry() {
	if [ $(uci get wbc.telemetry.enable 2>/dev/null) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Telemetry Enabled."
		if [ "$(uci get wbc.telemetry.mode 2>/dev/null)" = "rx" ]; then
			 telemetry_rx_instance
			echo "    Telemetry RX Mode, redirect to $(uci get wbc.telemetry.send_ip_port 2>/dev/null) and $(uci get wbc.telemetry.uart 2>/dev/null)..."
		fi

		if [ "$(uci get wbc.telemetry.mode 2>/dev/null)" = "tx" ]; then 
			telemetry_tx_instance
			echo "YJSNPI-Broadcast: Telemetry TX Mode on $(uci get wbc.telemetry.uart 2>/dev/null)..."
		fi
	fi
}

start_service() {
	if [ $(uci get wbc.wbc.enable 2>/dev/null) -eq 0 ]; then 
		exit
	fi
	init
	start_video
	start_telemetry
	start_rssi
	echo `date '+%s'` >/var/run/wbc/restart_timestamp
#	echo `md5sum /etc/config/wbc | cut -d ' ' -f 1` >/var/run/wbc/restart_config_md5sum
}

service_triggers() {
        procd_add_reload_trigger "wbc"
}

