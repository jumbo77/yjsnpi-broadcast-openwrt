#!/bin/sh /etc/rc.common

START=99
STOP=15

USE_PROCD=1

EXTRA_COMMANDS="measure"
EXTRA_HELP=<<EOF
	measure	Test tx_measure with current settings.
EOF

STTY_ARGS="-icrnl -ocrnl -imaxbel -opost -isig -icanon -echo -echoe -ixoff -ixon"

measure() {
	init_nic >/dev/null 
	TEST_RESULT=1000000	# default
	if [ "$(uci get wbc.video.mode)" = "tx" ]; then
		TEST_RESULT=$(/usr/sbin/tx_measure \
		-p $(uci get wbc.video.port) \
		-b $(uci get wbc.video.datanum) \
		-r $(uci get wbc.video.fecnum) \
		-f $(uci get wbc.video.packetsize) \
		-t $(uci get wbc.video.frametype) \
		-d $(uci get wbc.video.bitrate) \
		-y 0 $(uci get wbc.nic.iface) )
	fi
	echo $TEST_RESULT
}

init_nic() {
	NIC=$(uci get wbc.nic.iface)
	FREQ=$(uci get wbc.nic.freq)
	CHANBW=$(uci get wbc.nic.chanbw)
	PHY_NAME=$(iwinfo $NIC info|grep "PHY name"|cut -d ':' -f 3)
	iw reg set CN					
	ifconfig $NIC mtu 2304
	ifconfig $NIC down 				
	iw dev $NIC set monitor none	
	ifconfig $NIC up 			
	iw dev $NIC set freq $FREQ		
	CHANBW_PATH=$(find /sys/kernel/debug/ieee80211 -name chanbw |grep $PHY_NAME)
	if [ -f $CHANBW_PATH ]; then
		echo "    Init_NIC: $NIC maybe supports 5MHz/10MHz bandwidth."
		echo $CHANBW > $CHANBW_PATH 
	else
		echo "    Init_NIC: $NIC on 5MHz/10MHz bandwidth is not supported. Use default instead."
	fi
}

init() {
	# 0. Init Wi-Fi card here
	echo "YJSNPI-Broadcast: Init Wi-Fi Card..."
	init_nic
	if [ "$(uci get wbc.video.mode)" = "tx" ]; then
		echo "YJSNPI-Broadcast: TX measure..."
		echo $(measure) > /tmp/bitrate_measured_kbit
		echo "    TX measure finished, $(cat /tmp/bitrate_measured_kbit)"
		if ["$(uci get wbc.video.bitrate_mode)" = "auto"]; then
			echo `expr $(cat /tmp/bitrate_measured_kbit) \* $(uci get wbc.video.bitrate_percent) / 102400` > /tmp/bitrate_kbit
		else
			echo $(uci get wbc.video.bitrate_manual) > /tmp/bitrate_kbit
		fi 
	else
		echo 1024000 > /tmp/bitrate_measured_kbit
		echo 1000 > /tmp/bitrate_kbit
	fi
	# To-do: Find out what these things mean and how to bypass

	echo "0" > /tmp/cts
	echo "0" > /tmp/undervolt 		# a wireless router should never...
	mkdir -p /var/run/wbc			# for saving running status
	
	/usr/sbin/sharedmem_init_tx
	/usr/sbin/sharedmem_init_rx
}

video_tx_instance() {
	procd_open_instance
	#if [ $(uci get wbc.video.encrypt_enable) -eq 1 ]; then
	procd_set_param command socat -u UDP-LISTEN:$(uci get wbc.video.listen_port) EXEC:"/usr/sbin/tx_rawsock -p $(uci get wbc.video.port) -b $(uci get wbc.video.datanum) -r $(uci get wbc.video.fecnum) -f $(uci get wbc.video.packetsize) -t $(uci get wbc.video.frametype) -d $(uci get wbc.video.bitrate) -y 0 $(uci get wbc.nic.iface)"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/videotx.pid
	procd_close_instance
}

video_rx_instance() {
	procd_open_instance
	procd_set_param command socat -u EXEC:"/usr/sbin/rx -p $(uci get wbc.video.port) -b $(uci get wbc.video.datanum) -r $(uci get wbc.video.fecnum) -f $(uci get wbc.video.packetsize) -d $(uci get wbc.video.rxbuf) $(uci get wbc.nic.iface)"
	if [ $(uci get wbc.video.save_enable) -eq 1 ]; then
		procd_append_param command EXEC:"/usr/sbin/suftees 30000 $(uci get wbc.video.send_ip_port|cut -d ':' -f 1) $(uci get wbc.video.send_ip_port|cut -d ':' -f 2) $(uci get wbc.video.savepath)/video-$(date +%Y%m%d).raw" 
	else
		procd_append_param command UDP:$(uci get wbc.video.send_ip_port),sourceport=30000
	fi
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/videorx.pid
	procd_close_instance
}

rssi_tx_instance() {
	procd_open_instance
	procd_set_param command /usr/sbin/rssitx $(uci get wbc.nic.iface)
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/rssitx.pid
	procd_close_instance
}

rssi_rx_instance() {
	procd_open_instance
	procd_set_param command /usr/sbin/rssirx $(uci get wbc.nic.iface)
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/rssirx.pid
	procd_close_instance
	
	procd_open_instance
	procd_set_param command /usr/sbin/rssi_forward $(uci get wbc.rssi.send_ip_port|cut -d ':' -f 1) $(uci get wbc.rssi.send_ip_port|cut -d ':' -f 2) 30001
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/rssi_forward.pid
	procd_close_instance
}

telemetry_tx_instance() {
	stty -F $(uci get wbc.telemetry.uart) $STTY_ARGS $(uci get wbc.telemetry.baud) 
	procd_open_instance
	procd_set_param command socat -u $(uci get wbc.telemetry.uart),b$(uci get wbc.telemetry.baud),raw EXEC:"/usr/sbin/tx_telemetry -p $(uci get wbc.telemetry.port) -c $(uci get wbc.telemetry.cts) -r $(uci get wbc.telemetry.retrans) -x $(uci get wbc.telemetry.proto) -d $(uci get wbc.telemetry.bitrate) -y 0 $(uci get wbc.nic.iface)"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/telemetry_tx.pid
	procd_close_instance
}

telemetry_rx_instance() {
	stty -F $(uci get wbc.telemetry.uart) $STTY_ARGS $(uci get wbc.telemetry.baud) 
	procd_open_instance
	procd_set_param command socat -u EXEC:"/usr/sbin/rx_rc_telemetry_buf -p $(uci get wbc.telemetry.port) -b 19200 -s /dev/null -o 1 -r 0 $(uci get wbc.nic.iface)" 
	if [ $(uci get wbc.telemetry.save_enable) -eq 1 ]; then
		procd_append_param command EXEC:"/usr/sbin/suftees 30002 $(uci get wbc.telemetry.send_ip_port|cut -d ':' -f 1) $(uci get wbc.telemetry.send_ip_port|cut -d ':' -f 2) $(uci get wbc.telemetry.savepath)/telemetry-$(date +%Y%m%d).raw $(uci get wbc.telemetry.uart)"
	else
		procd_append_param command EXEC:"/usr/sbin/suftees 30002 $(uci get wbc.telemetry.send_ip_port|cut -d ':' -f 1) $(uci get wbc.telemetry.send_ip_port|cut -d ':' -f 2) $(uci get wbc.telemetry.uart)"
	fi
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/telemetry_rx.pid
	procd_close_instance
}

uplink_tx_instance() {
	procd_open_instance
	procd_set_param command socat -u $(uci get wbc.uplink.uart),b$(uci get wbc.uplink.baud),raw
	procd_append_param command EXEC:"/usr/sbin/tx_telemetry -p $(uci get wbc.uplink.port) -c $(uci get wbc.uplink.cts) -r $(uci get wbc.uplink.retrans) -x $(uci get wbc.uplink.proto) -d $(uci get wbc.uplink.bitrate) -y 0 $(uci get wbc.nic.iface)"
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/uplinktx.pid
	procd_close_instance
}

uplink_rx_instance() {
	procd_open_instance
	procd_set_param command /usr/sbin/rx_rc_telemetry -p $(uci get wbc.uplink.port) -r 99 -b $(uci get wbc.uplink.baud) -o 0 -s $(uci get wbc.uplink.uart) $(uci get wbc.nic.iface)
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn ${respawn_threshold:-36000} ${respawn_timeout:-1} ${respawn_retry:-100}
	procd_set_param pidfile /var/run/wbc/uplinkrx.pid
	procd_close_instance
}

start_video() {
	# 1. Video TX/RX Instance
	if [ $(uci get wbc.video.enable) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Video Transfer Enabled."
		if [ "$(uci get wbc.video.mode)" = "tx" ]; then
			video_tx_instance
			echo "    Video TX Mode, Starting tx..."
		fi
		if [ "$(uci get wbc.video.mode)" = "rx" ]; then
			video_rx_instance
			echo "    Video RX Mode, Starting rx..."
		fi
	fi
}

start_rssi() {
	if [ $(uci get wbc.rssi.enable) -eq 1 ]; then
		echo "YJSNPI-Broadcast: RSSI Enabled."
		if [ "$(uci get wbc.rssi.mode)" = "tx" ]; then
			rssi_tx_instance
			echo "    RSSI TX Mode, Starting rssitx..."
		fi
		if [ "$(uci get wbc.rssi.mode)" = "rx" ]; then
			rssi_rx_instance
			echo "    RSSI RX Mode, Starting rssirx, forward to $(uci get wbc.rssi.send_ip_port) ..."
		fi
	fi
}

start_telemetry() {
	if [ $(uci get wbc.telemetry.enable) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Telemetry Enabled."
		if [ "$(uci get wbc.telemetry.mode)" = "rx" ]; then
			 telemetry_rx_instance
			echo "    Telemetry RX Mode, redirect to $(uci get wbc.telemetry.send_ip_port) and $(uci get wbc.telemetry.uart)..."
		fi

		if [ "$(uci get wbc.telemetry.mode)" = "tx" ]; then 
			telemetry_tx_instance
			echo "YJSNPI-Broadcast: Telemetry TX Mode on $(uci get wbc.telemetry.uart)..."
		fi
	fi
}

start_uplink() {
# 3. Uplink RX Instance
	if [ $(uci get wbc.uplink.enable) -eq 1 ]; then
		echo "YJSNPI-Broadcast: Uplink Enabled."
		if [ "$(uci get wbc.uplink.mode)" = "rx" ]; then
			uplink_rx_instance
			echo "YJSNPI-Broadcast: Uplink RX Mode, output set to $(uci get wbc.uplink.uart), Starting rx_rc_telemetry..."
		fi

		if [ "$(uci get wbc.uplink.mode)" = "tx" ]; then
			uplink_tx_instance
			echo "YJSNPI-Broadcast: Uplink TX Mode from $(uci get wbc.uplink.uart), Starting tx_telemetry..."
		fi
	fi

}

init_fifo() {
	echo "FIFO Init ..."
	mkdir -p /tmp/wbc/fifo
}

start_service() {
	if [ $(uci get wbc.wbc.enable) -eq 0 ]; then 
		exit
	fi
	init_fifo
	init
	start_video
	start_telemetry
	start_uplink
	start_rssi
	echo `date '+%s'` >/var/run/wbc/restart_timestamp
	echo `md5sum /etc/config/wbc | cut -d ' ' -f 1` >/var/run/wbc/restart_config_md5sum
}

# Note:
#		(stdin) -> suftees -> (udp) + (write to file or fifo)s
#
# Video rx mode:
#  (rx -(socat)-> suftees) -------------------------------(udp)------------(socat(Pi)) -> hello_video(Pi)
#             Storage<-| 
# Video tx mode:
# 	raspivid(Pi) -(socat(Pi))-----------------------------(udp)------------(socat)-> tx_rawsock
#
# RSSI rx mode:
#  rssirx -(shared memory)-> rssi_forward ----------------(udp)------------> rssi_forward_in(Pi)
#
# RSSI tx mode:
#  rssitx (no more)
#
# Telemetry rx mode:
#  (rx_rc_telemetry_buf -(socat)-> suftees) ---------------(udp)-----------(socat(Pi))-> /root/telemetryfifo1 (Used by /tmp/osd(Pi))
#                			Storage<-| 
#                			   UART<-|				
#
# Telemetry tx mode:
#	UART -(socat)-> tx_telemetry
#
# Uplink tx mode:
#   UART -(socat)-> tx_telemetry
#
# Uplink rx mode:
#  rx_rc_telemetry(->UART)
#                       
#
